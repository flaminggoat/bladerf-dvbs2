// nios_system.v

// Generated using ACDS version 17.0 595

`timescale 1 ps / 1 ps
module nios_system (
		input  wire        clk_clk,                         //                      clk.clk
		input  wire        command_serial_in,               //                  command.serial_in
		output wire        command_serial_out,              //                         .serial_out
		output wire [31:0] correction_rx_phase_gain_export, // correction_rx_phase_gain.export
		output wire [31:0] correction_tx_phase_gain_export, // correction_tx_phase_gain.export
		input  wire        dac_MISO,                        //                      dac.MISO
		output wire        dac_MOSI,                        //                         .MOSI
		output wire        dac_SCLK,                        //                         .SCLK
		output wire [1:0]  dac_SS_n,                        //                         .SS_n
		output wire [31:0] gpio_export,                     //                     gpio.export
		input  wire        vctcxo_tamer_tune_ref,           //             vctcxo_tamer.tune_ref
		input  wire        vctcxo_tamer_vctcxo_clock,       //                         .vctcxo_clock
		output wire        oc_i2c_scl_pad_o,                //                   oc_i2c.scl_pad_o
		output wire        oc_i2c_scl_padoen_o,             //                         .scl_padoen_o
		input  wire        oc_i2c_sda_pad_i,                //                         .sda_pad_i
		output wire        oc_i2c_sda_pad_o,                //                         .sda_pad_o
		output wire        oc_i2c_sda_padoen_o,             //                         .sda_padoen_o
		input  wire        oc_i2c_arst_i,                   //                         .arst_i
		input  wire        oc_i2c_scl_pad_i,                //                         .scl_pad_i
		input  wire        reset_reset_n,                   //                    reset.reset_n
		input  wire        rx_tamer_ts_sync_in,             //                 rx_tamer.ts_sync_in
		output wire        rx_tamer_ts_sync_out,            //                         .ts_sync_out
		input  wire        rx_tamer_ts_pps,                 //                         .ts_pps
		input  wire        rx_tamer_ts_clock,               //                         .ts_clock
		input  wire        rx_tamer_ts_reset,               //                         .ts_reset
		output wire [63:0] rx_tamer_ts_time,                //                         .ts_time
		input  wire [7:0]  rx_trigger_ctl_in_port,          //           rx_trigger_ctl.in_port
		output wire [7:0]  rx_trigger_ctl_out_port,         //                         .out_port
		output wire        spi_sclk,                        //                      spi.sclk
		input  wire        spi_miso,                        //                         .miso
		output wire        spi_mosi,                        //                         .mosi
		output wire        spi_ss_n,                        //                         .ss_n
		input  wire        tx_tamer_ts_sync_in,             //                 tx_tamer.ts_sync_in
		output wire        tx_tamer_ts_sync_out,            //                         .ts_sync_out
		input  wire        tx_tamer_ts_pps,                 //                         .ts_pps
		input  wire        tx_tamer_ts_clock,               //                         .ts_clock
		input  wire        tx_tamer_ts_reset,               //                         .ts_reset
		output wire [63:0] tx_tamer_ts_time,                //                         .ts_time
		input  wire [7:0]  tx_trigger_ctl_in_port,          //           tx_trigger_ctl.in_port
		output wire [7:0]  tx_trigger_ctl_out_port,         //                         .out_port
		input  wire [31:0] xb_gpio_in_port,                 //                  xb_gpio.in_port
		output wire [31:0] xb_gpio_out_port,                //                         .out_port
		output wire [31:0] xb_gpio_dir_export               //              xb_gpio_dir.export
	);

	wire  [31:0] nios2_data_master_readdata;                                        // mm_interconnect_0:nios2_data_master_readdata -> nios2:d_readdata
	wire         nios2_data_master_waitrequest;                                     // mm_interconnect_0:nios2_data_master_waitrequest -> nios2:d_waitrequest
	wire         nios2_data_master_debugaccess;                                     // nios2:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:nios2_data_master_debugaccess
	wire  [15:0] nios2_data_master_address;                                         // nios2:d_address -> mm_interconnect_0:nios2_data_master_address
	wire   [3:0] nios2_data_master_byteenable;                                      // nios2:d_byteenable -> mm_interconnect_0:nios2_data_master_byteenable
	wire         nios2_data_master_read;                                            // nios2:d_read -> mm_interconnect_0:nios2_data_master_read
	wire         nios2_data_master_write;                                           // nios2:d_write -> mm_interconnect_0:nios2_data_master_write
	wire  [31:0] nios2_data_master_writedata;                                       // nios2:d_writedata -> mm_interconnect_0:nios2_data_master_writedata
	wire  [31:0] nios2_instruction_master_readdata;                                 // mm_interconnect_0:nios2_instruction_master_readdata -> nios2:i_readdata
	wire         nios2_instruction_master_waitrequest;                              // mm_interconnect_0:nios2_instruction_master_waitrequest -> nios2:i_waitrequest
	wire  [15:0] nios2_instruction_master_address;                                  // nios2:i_address -> mm_interconnect_0:nios2_instruction_master_address
	wire         nios2_instruction_master_read;                                     // nios2:i_read -> mm_interconnect_0:nios2_instruction_master_read
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect;          // mm_interconnect_0:jtag_uart_avalon_jtag_slave_chipselect -> jtag_uart:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata;            // jtag_uart:av_readdata -> mm_interconnect_0:jtag_uart_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest;         // jtag_uart:av_waitrequest -> mm_interconnect_0:jtag_uart_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_address;             // mm_interconnect_0:jtag_uart_avalon_jtag_slave_address -> jtag_uart:av_address
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_read;                // mm_interconnect_0:jtag_uart_avalon_jtag_slave_read -> jtag_uart:av_read_n
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_write;               // mm_interconnect_0:jtag_uart_avalon_jtag_slave_write -> jtag_uart:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata;           // mm_interconnect_0:jtag_uart_avalon_jtag_slave_writedata -> jtag_uart:av_writedata
	wire  [31:0] mm_interconnect_0_command_uart_avalon_slave_readdata;              // command_uart:dout -> mm_interconnect_0:command_uart_avalon_slave_readdata
	wire         mm_interconnect_0_command_uart_avalon_slave_waitrequest;           // command_uart:waitreq -> mm_interconnect_0:command_uart_avalon_slave_waitrequest
	wire   [4:0] mm_interconnect_0_command_uart_avalon_slave_address;               // mm_interconnect_0:command_uart_avalon_slave_address -> command_uart:addr
	wire         mm_interconnect_0_command_uart_avalon_slave_read;                  // mm_interconnect_0:command_uart_avalon_slave_read -> command_uart:read
	wire         mm_interconnect_0_command_uart_avalon_slave_readdatavalid;         // command_uart:readack -> mm_interconnect_0:command_uart_avalon_slave_readdatavalid
	wire         mm_interconnect_0_command_uart_avalon_slave_write;                 // mm_interconnect_0:command_uart_avalon_slave_write -> command_uart:write
	wire  [31:0] mm_interconnect_0_command_uart_avalon_slave_writedata;             // mm_interconnect_0:command_uart_avalon_slave_writedata -> command_uart:din
	wire   [7:0] mm_interconnect_0_tx_tamer_avalon_slave_0_readdata;                // tx_tamer:dout -> mm_interconnect_0:tx_tamer_avalon_slave_0_readdata
	wire         mm_interconnect_0_tx_tamer_avalon_slave_0_waitrequest;             // tx_tamer:waitreq -> mm_interconnect_0:tx_tamer_avalon_slave_0_waitrequest
	wire   [4:0] mm_interconnect_0_tx_tamer_avalon_slave_0_address;                 // mm_interconnect_0:tx_tamer_avalon_slave_0_address -> tx_tamer:addr
	wire         mm_interconnect_0_tx_tamer_avalon_slave_0_read;                    // mm_interconnect_0:tx_tamer_avalon_slave_0_read -> tx_tamer:read
	wire         mm_interconnect_0_tx_tamer_avalon_slave_0_readdatavalid;           // tx_tamer:readack -> mm_interconnect_0:tx_tamer_avalon_slave_0_readdatavalid
	wire         mm_interconnect_0_tx_tamer_avalon_slave_0_write;                   // mm_interconnect_0:tx_tamer_avalon_slave_0_write -> tx_tamer:write
	wire   [7:0] mm_interconnect_0_tx_tamer_avalon_slave_0_writedata;               // mm_interconnect_0:tx_tamer_avalon_slave_0_writedata -> tx_tamer:din
	wire   [7:0] mm_interconnect_0_rx_tamer_avalon_slave_0_readdata;                // rx_tamer:dout -> mm_interconnect_0:rx_tamer_avalon_slave_0_readdata
	wire         mm_interconnect_0_rx_tamer_avalon_slave_0_waitrequest;             // rx_tamer:waitreq -> mm_interconnect_0:rx_tamer_avalon_slave_0_waitrequest
	wire   [4:0] mm_interconnect_0_rx_tamer_avalon_slave_0_address;                 // mm_interconnect_0:rx_tamer_avalon_slave_0_address -> rx_tamer:addr
	wire         mm_interconnect_0_rx_tamer_avalon_slave_0_read;                    // mm_interconnect_0:rx_tamer_avalon_slave_0_read -> rx_tamer:read
	wire         mm_interconnect_0_rx_tamer_avalon_slave_0_readdatavalid;           // rx_tamer:readack -> mm_interconnect_0:rx_tamer_avalon_slave_0_readdatavalid
	wire         mm_interconnect_0_rx_tamer_avalon_slave_0_write;                   // mm_interconnect_0:rx_tamer_avalon_slave_0_write -> rx_tamer:write
	wire   [7:0] mm_interconnect_0_rx_tamer_avalon_slave_0_writedata;               // mm_interconnect_0:rx_tamer_avalon_slave_0_writedata -> rx_tamer:din
	wire   [7:0] mm_interconnect_0_lms_spi_avalon_slave_0_readdata;                 // lms_spi:mm_dout -> mm_interconnect_0:lms_spi_avalon_slave_0_readdata
	wire         mm_interconnect_0_lms_spi_avalon_slave_0_waitrequest;              // lms_spi:mm_busy -> mm_interconnect_0:lms_spi_avalon_slave_0_waitrequest
	wire   [7:0] mm_interconnect_0_lms_spi_avalon_slave_0_address;                  // mm_interconnect_0:lms_spi_avalon_slave_0_address -> lms_spi:mm_addr
	wire         mm_interconnect_0_lms_spi_avalon_slave_0_read;                     // mm_interconnect_0:lms_spi_avalon_slave_0_read -> lms_spi:mm_read
	wire         mm_interconnect_0_lms_spi_avalon_slave_0_readdatavalid;            // lms_spi:mm_dout_val -> mm_interconnect_0:lms_spi_avalon_slave_0_readdatavalid
	wire         mm_interconnect_0_lms_spi_avalon_slave_0_write;                    // mm_interconnect_0:lms_spi_avalon_slave_0_write -> lms_spi:mm_write
	wire   [7:0] mm_interconnect_0_lms_spi_avalon_slave_0_writedata;                // mm_interconnect_0:lms_spi_avalon_slave_0_writedata -> lms_spi:mm_din
	wire   [7:0] mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_readdata;          // vctcxo_tamer_0:mm_rd_data -> mm_interconnect_0:vctcxo_tamer_0_avalon_slave_0_readdata
	wire         mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_waitrequest;       // vctcxo_tamer_0:mm_wait_req -> mm_interconnect_0:vctcxo_tamer_0_avalon_slave_0_waitrequest
	wire   [7:0] mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_address;           // mm_interconnect_0:vctcxo_tamer_0_avalon_slave_0_address -> vctcxo_tamer_0:mm_addr
	wire         mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_read;              // mm_interconnect_0:vctcxo_tamer_0_avalon_slave_0_read -> vctcxo_tamer_0:mm_rd_req
	wire         mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_readdatavalid;     // vctcxo_tamer_0:mm_rd_datav -> mm_interconnect_0:vctcxo_tamer_0_avalon_slave_0_readdatavalid
	wire         mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_write;             // mm_interconnect_0:vctcxo_tamer_0_avalon_slave_0_write -> vctcxo_tamer_0:mm_wr_req
	wire   [7:0] mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_writedata;         // mm_interconnect_0:vctcxo_tamer_0_avalon_slave_0_writedata -> vctcxo_tamer_0:mm_wr_data
	wire         mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_chipselect;  // mm_interconnect_0:opencores_i2c_bladerf_oc_i2c_master_chipselect -> opencores_i2c:wb_cyc_i
	wire   [7:0] mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_readdata;    // opencores_i2c:wb_dat_o -> mm_interconnect_0:opencores_i2c_bladerf_oc_i2c_master_readdata
	wire         mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_waitrequest; // opencores_i2c:wb_ack_o -> mm_interconnect_0:opencores_i2c_bladerf_oc_i2c_master_waitrequest
	wire   [2:0] mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_address;     // mm_interconnect_0:opencores_i2c_bladerf_oc_i2c_master_address -> opencores_i2c:wb_adr_i
	wire   [0:0] mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_byteenable;  // mm_interconnect_0:opencores_i2c_bladerf_oc_i2c_master_byteenable -> opencores_i2c:wb_stb_i
	wire         mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_write;       // mm_interconnect_0:opencores_i2c_bladerf_oc_i2c_master_write -> opencores_i2c:wb_we_i
	wire   [7:0] mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_writedata;   // mm_interconnect_0:opencores_i2c_bladerf_oc_i2c_master_writedata -> opencores_i2c:wb_dat_i
	wire  [31:0] mm_interconnect_0_nios2_debug_mem_slave_readdata;                  // nios2:debug_mem_slave_readdata -> mm_interconnect_0:nios2_debug_mem_slave_readdata
	wire         mm_interconnect_0_nios2_debug_mem_slave_waitrequest;               // nios2:debug_mem_slave_waitrequest -> mm_interconnect_0:nios2_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_nios2_debug_mem_slave_debugaccess;               // mm_interconnect_0:nios2_debug_mem_slave_debugaccess -> nios2:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_nios2_debug_mem_slave_address;                   // mm_interconnect_0:nios2_debug_mem_slave_address -> nios2:debug_mem_slave_address
	wire         mm_interconnect_0_nios2_debug_mem_slave_read;                      // mm_interconnect_0:nios2_debug_mem_slave_read -> nios2:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_nios2_debug_mem_slave_byteenable;                // mm_interconnect_0:nios2_debug_mem_slave_byteenable -> nios2:debug_mem_slave_byteenable
	wire         mm_interconnect_0_nios2_debug_mem_slave_write;                     // mm_interconnect_0:nios2_debug_mem_slave_write -> nios2:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_nios2_debug_mem_slave_writedata;                 // mm_interconnect_0:nios2_debug_mem_slave_writedata -> nios2:debug_mem_slave_writedata
	wire         mm_interconnect_0_ram_s1_chipselect;                               // mm_interconnect_0:ram_s1_chipselect -> ram:chipselect
	wire  [31:0] mm_interconnect_0_ram_s1_readdata;                                 // ram:readdata -> mm_interconnect_0:ram_s1_readdata
	wire  [11:0] mm_interconnect_0_ram_s1_address;                                  // mm_interconnect_0:ram_s1_address -> ram:address
	wire   [3:0] mm_interconnect_0_ram_s1_byteenable;                               // mm_interconnect_0:ram_s1_byteenable -> ram:byteenable
	wire         mm_interconnect_0_ram_s1_write;                                    // mm_interconnect_0:ram_s1_write -> ram:write
	wire  [31:0] mm_interconnect_0_ram_s1_writedata;                                // mm_interconnect_0:ram_s1_writedata -> ram:writedata
	wire         mm_interconnect_0_ram_s1_clken;                                    // mm_interconnect_0:ram_s1_clken -> ram:clken
	wire         mm_interconnect_0_control_s1_chipselect;                           // mm_interconnect_0:control_s1_chipselect -> control:chipselect
	wire  [31:0] mm_interconnect_0_control_s1_readdata;                             // control:readdata -> mm_interconnect_0:control_s1_readdata
	wire   [2:0] mm_interconnect_0_control_s1_address;                              // mm_interconnect_0:control_s1_address -> control:address
	wire         mm_interconnect_0_control_s1_write;                                // mm_interconnect_0:control_s1_write -> control:write_n
	wire  [31:0] mm_interconnect_0_control_s1_writedata;                            // mm_interconnect_0:control_s1_writedata -> control:writedata
	wire         mm_interconnect_0_iq_corr_rx_phase_gain_s1_chipselect;             // mm_interconnect_0:iq_corr_rx_phase_gain_s1_chipselect -> iq_corr_rx_phase_gain:chipselect
	wire  [31:0] mm_interconnect_0_iq_corr_rx_phase_gain_s1_readdata;               // iq_corr_rx_phase_gain:readdata -> mm_interconnect_0:iq_corr_rx_phase_gain_s1_readdata
	wire   [1:0] mm_interconnect_0_iq_corr_rx_phase_gain_s1_address;                // mm_interconnect_0:iq_corr_rx_phase_gain_s1_address -> iq_corr_rx_phase_gain:address
	wire         mm_interconnect_0_iq_corr_rx_phase_gain_s1_write;                  // mm_interconnect_0:iq_corr_rx_phase_gain_s1_write -> iq_corr_rx_phase_gain:write_n
	wire  [31:0] mm_interconnect_0_iq_corr_rx_phase_gain_s1_writedata;              // mm_interconnect_0:iq_corr_rx_phase_gain_s1_writedata -> iq_corr_rx_phase_gain:writedata
	wire         mm_interconnect_0_iq_corr_tx_phase_gain_s1_chipselect;             // mm_interconnect_0:iq_corr_tx_phase_gain_s1_chipselect -> iq_corr_tx_phase_gain:chipselect
	wire  [31:0] mm_interconnect_0_iq_corr_tx_phase_gain_s1_readdata;               // iq_corr_tx_phase_gain:readdata -> mm_interconnect_0:iq_corr_tx_phase_gain_s1_readdata
	wire   [1:0] mm_interconnect_0_iq_corr_tx_phase_gain_s1_address;                // mm_interconnect_0:iq_corr_tx_phase_gain_s1_address -> iq_corr_tx_phase_gain:address
	wire         mm_interconnect_0_iq_corr_tx_phase_gain_s1_write;                  // mm_interconnect_0:iq_corr_tx_phase_gain_s1_write -> iq_corr_tx_phase_gain:write_n
	wire  [31:0] mm_interconnect_0_iq_corr_tx_phase_gain_s1_writedata;              // mm_interconnect_0:iq_corr_tx_phase_gain_s1_writedata -> iq_corr_tx_phase_gain:writedata
	wire         mm_interconnect_0_xb_gpio_s1_chipselect;                           // mm_interconnect_0:xb_gpio_s1_chipselect -> xb_gpio:chipselect
	wire  [31:0] mm_interconnect_0_xb_gpio_s1_readdata;                             // xb_gpio:readdata -> mm_interconnect_0:xb_gpio_s1_readdata
	wire   [1:0] mm_interconnect_0_xb_gpio_s1_address;                              // mm_interconnect_0:xb_gpio_s1_address -> xb_gpio:address
	wire         mm_interconnect_0_xb_gpio_s1_write;                                // mm_interconnect_0:xb_gpio_s1_write -> xb_gpio:write_n
	wire  [31:0] mm_interconnect_0_xb_gpio_s1_writedata;                            // mm_interconnect_0:xb_gpio_s1_writedata -> xb_gpio:writedata
	wire         mm_interconnect_0_xb_gpio_dir_s1_chipselect;                       // mm_interconnect_0:xb_gpio_dir_s1_chipselect -> xb_gpio_dir:chipselect
	wire  [31:0] mm_interconnect_0_xb_gpio_dir_s1_readdata;                         // xb_gpio_dir:readdata -> mm_interconnect_0:xb_gpio_dir_s1_readdata
	wire   [1:0] mm_interconnect_0_xb_gpio_dir_s1_address;                          // mm_interconnect_0:xb_gpio_dir_s1_address -> xb_gpio_dir:address
	wire         mm_interconnect_0_xb_gpio_dir_s1_write;                            // mm_interconnect_0:xb_gpio_dir_s1_write -> xb_gpio_dir:write_n
	wire  [31:0] mm_interconnect_0_xb_gpio_dir_s1_writedata;                        // mm_interconnect_0:xb_gpio_dir_s1_writedata -> xb_gpio_dir:writedata
	wire         mm_interconnect_0_tx_trigger_ctl_s1_chipselect;                    // mm_interconnect_0:tx_trigger_ctl_s1_chipselect -> tx_trigger_ctl:chipselect
	wire  [31:0] mm_interconnect_0_tx_trigger_ctl_s1_readdata;                      // tx_trigger_ctl:readdata -> mm_interconnect_0:tx_trigger_ctl_s1_readdata
	wire   [2:0] mm_interconnect_0_tx_trigger_ctl_s1_address;                       // mm_interconnect_0:tx_trigger_ctl_s1_address -> tx_trigger_ctl:address
	wire         mm_interconnect_0_tx_trigger_ctl_s1_write;                         // mm_interconnect_0:tx_trigger_ctl_s1_write -> tx_trigger_ctl:write_n
	wire  [31:0] mm_interconnect_0_tx_trigger_ctl_s1_writedata;                     // mm_interconnect_0:tx_trigger_ctl_s1_writedata -> tx_trigger_ctl:writedata
	wire         mm_interconnect_0_rx_trigger_ctl_s1_chipselect;                    // mm_interconnect_0:rx_trigger_ctl_s1_chipselect -> rx_trigger_ctl:chipselect
	wire  [31:0] mm_interconnect_0_rx_trigger_ctl_s1_readdata;                      // rx_trigger_ctl:readdata -> mm_interconnect_0:rx_trigger_ctl_s1_readdata
	wire   [2:0] mm_interconnect_0_rx_trigger_ctl_s1_address;                       // mm_interconnect_0:rx_trigger_ctl_s1_address -> rx_trigger_ctl:address
	wire         mm_interconnect_0_rx_trigger_ctl_s1_write;                         // mm_interconnect_0:rx_trigger_ctl_s1_write -> rx_trigger_ctl:write_n
	wire  [31:0] mm_interconnect_0_rx_trigger_ctl_s1_writedata;                     // mm_interconnect_0:rx_trigger_ctl_s1_writedata -> rx_trigger_ctl:writedata
	wire         mm_interconnect_0_peripheral_spi_spi_control_port_chipselect;      // mm_interconnect_0:peripheral_spi_spi_control_port_chipselect -> peripheral_spi:spi_select
	wire  [15:0] mm_interconnect_0_peripheral_spi_spi_control_port_readdata;        // peripheral_spi:data_to_cpu -> mm_interconnect_0:peripheral_spi_spi_control_port_readdata
	wire   [2:0] mm_interconnect_0_peripheral_spi_spi_control_port_address;         // mm_interconnect_0:peripheral_spi_spi_control_port_address -> peripheral_spi:mem_addr
	wire         mm_interconnect_0_peripheral_spi_spi_control_port_read;            // mm_interconnect_0:peripheral_spi_spi_control_port_read -> peripheral_spi:read_n
	wire         mm_interconnect_0_peripheral_spi_spi_control_port_write;           // mm_interconnect_0:peripheral_spi_spi_control_port_write -> peripheral_spi:write_n
	wire  [15:0] mm_interconnect_0_peripheral_spi_spi_control_port_writedata;       // mm_interconnect_0:peripheral_spi_spi_control_port_writedata -> peripheral_spi:data_from_cpu
	wire         irq_mapper_receiver0_irq;                                          // command_uart:irq -> irq_mapper:receiver0_irq
	wire         irq_mapper_receiver1_irq;                                          // opencores_i2c:wb_inta_o -> irq_mapper:receiver1_irq
	wire         irq_mapper_receiver2_irq;                                          // tx_tamer:intr -> irq_mapper:receiver2_irq
	wire         irq_mapper_receiver3_irq;                                          // rx_tamer:intr -> irq_mapper:receiver3_irq
	wire         irq_mapper_receiver4_irq;                                          // vctcxo_tamer_0:mm_irq -> irq_mapper:receiver4_irq
	wire         irq_mapper_receiver5_irq;                                          // jtag_uart:av_irq -> irq_mapper:receiver5_irq
	wire         irq_mapper_receiver6_irq;                                          // peripheral_spi:irq -> irq_mapper:receiver6_irq
	wire  [31:0] nios2_irq_irq;                                                     // irq_mapper:sender_irq -> nios2:irq
	wire         rst_controller_reset_out_reset;                                    // rst_controller:reset_out -> [command_uart:reset, control:reset_n, iq_corr_rx_phase_gain:reset_n, iq_corr_tx_phase_gain:reset_n, irq_mapper:reset, jtag_uart:rst_n, lms_spi:mm_reset, mm_interconnect_0:nios2_reset_reset_bridge_in_reset_reset, nios2:reset_n, opencores_i2c:wb_rst_i, peripheral_spi:reset_n, ram:reset, rst_translator:in_reset, rx_tamer:reset, rx_trigger_ctl:reset_n, tx_tamer:reset, tx_trigger_ctl:reset_n, vctcxo_tamer_0:mm_reset, xb_gpio:reset_n, xb_gpio_dir:reset_n]
	wire         rst_controller_reset_out_reset_req;                                // rst_controller:reset_req -> [nios2:reset_req, ram:reset_req, rst_translator:reset_req_in]

	command_uart command_uart (
		.reset      (rst_controller_reset_out_reset),                            //        reset.reset
		.rs232_sin  (command_serial_in),                                         //        rs232.serial_in
		.rs232_sout (command_serial_out),                                        //             .serial_out
		.irq        (irq_mapper_receiver0_irq),                                  //    interrupt.irq
		.clock      (clk_clk),                                                   //        clock.clk
		.addr       (mm_interconnect_0_command_uart_avalon_slave_address),       // avalon_slave.address
		.dout       (mm_interconnect_0_command_uart_avalon_slave_readdata),      //             .readdata
		.din        (mm_interconnect_0_command_uart_avalon_slave_writedata),     //             .writedata
		.read       (mm_interconnect_0_command_uart_avalon_slave_read),          //             .read
		.write      (mm_interconnect_0_command_uart_avalon_slave_write),         //             .write
		.readack    (mm_interconnect_0_command_uart_avalon_slave_readdatavalid), //             .readdatavalid
		.waitreq    (mm_interconnect_0_command_uart_avalon_slave_waitrequest)    //             .waitrequest
	);

	nios_system_control control (
		.clk        (clk_clk),                                 //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),         //               reset.reset_n
		.address    (mm_interconnect_0_control_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_control_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_control_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_control_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_control_s1_readdata),   //                    .readdata
		.out_port   (gpio_export)                              // external_connection.export
	);

	vctcxo_tamer vctcxo_tamer_0 (
		.mm_reset     (rst_controller_reset_out_reset),                                //       reset_sink.reset
		.mm_clock     (clk_clk),                                                       //       clock_sink.clk
		.tune_ref     (vctcxo_tamer_tune_ref),                                         //      conduit_end.tune_ref
		.vctcxo_clock (vctcxo_tamer_vctcxo_clock),                                     //                 .vctcxo_clock
		.mm_addr      (mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_address),       //   avalon_slave_0.address
		.mm_wr_data   (mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_writedata),     //                 .writedata
		.mm_rd_data   (mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_readdata),      //                 .readdata
		.mm_rd_datav  (mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_readdatavalid), //                 .readdatavalid
		.mm_wait_req  (mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_waitrequest),   //                 .waitrequest
		.mm_rd_req    (mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_read),          //                 .read
		.mm_wr_req    (mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_write),         //                 .write
		.mm_irq       (irq_mapper_receiver4_irq)                                       // interrupt_sender.irq
	);

	nios_system_iq_corr_rx_phase_gain iq_corr_rx_phase_gain (
		.clk        (clk_clk),                                               //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                       //               reset.reset_n
		.address    (mm_interconnect_0_iq_corr_rx_phase_gain_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_iq_corr_rx_phase_gain_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_iq_corr_rx_phase_gain_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_iq_corr_rx_phase_gain_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_iq_corr_rx_phase_gain_s1_readdata),   //                    .readdata
		.out_port   (correction_rx_phase_gain_export)                        // external_connection.export
	);

	nios_system_iq_corr_tx_phase_gain iq_corr_tx_phase_gain (
		.clk        (clk_clk),                                               //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                       //               reset.reset_n
		.address    (mm_interconnect_0_iq_corr_tx_phase_gain_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_iq_corr_tx_phase_gain_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_iq_corr_tx_phase_gain_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_iq_corr_tx_phase_gain_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_iq_corr_tx_phase_gain_s1_readdata),   //                    .readdata
		.out_port   (correction_tx_phase_gain_export)                        // external_connection.export
	);

	nios_system_jtag_uart jtag_uart (
		.clk            (clk_clk),                                                   //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                           //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_receiver5_irq)                                   //               irq.irq
	);

	lms6_spi_controller #(
		.CLOCK_DIV  (4),
		.ADDR_WIDTH (8),
		.DATA_WIDTH (8)
	) lms_spi (
		.mm_reset    (rst_controller_reset_out_reset),                         //     reset_sink.reset
		.mm_clock    (clk_clk),                                                //     clock_sink.clk
		.sclk        (spi_sclk),                                               //    conduit_end.sclk
		.miso        (spi_miso),                                               //               .miso
		.mosi        (spi_mosi),                                               //               .mosi
		.cs_n        (spi_ss_n),                                               //               .ss_n
		.mm_addr     (mm_interconnect_0_lms_spi_avalon_slave_0_address),       // avalon_slave_0.address
		.mm_din      (mm_interconnect_0_lms_spi_avalon_slave_0_writedata),     //               .writedata
		.mm_dout     (mm_interconnect_0_lms_spi_avalon_slave_0_readdata),      //               .readdata
		.mm_dout_val (mm_interconnect_0_lms_spi_avalon_slave_0_readdatavalid), //               .readdatavalid
		.mm_busy     (mm_interconnect_0_lms_spi_avalon_slave_0_waitrequest),   //               .waitrequest
		.mm_read     (mm_interconnect_0_lms_spi_avalon_slave_0_read),          //               .read
		.mm_write    (mm_interconnect_0_lms_spi_avalon_slave_0_write)          //               .write
	);

	nios_system_nios2 nios2 (
		.clk                                 (clk_clk),                                             //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                     //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                  //                          .reset_req
		.d_address                           (nios2_data_master_address),                           //               data_master.address
		.d_byteenable                        (nios2_data_master_byteenable),                        //                          .byteenable
		.d_read                              (nios2_data_master_read),                              //                          .read
		.d_readdata                          (nios2_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (nios2_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (nios2_data_master_write),                             //                          .write
		.d_writedata                         (nios2_data_master_writedata),                         //                          .writedata
		.debug_mem_slave_debugaccess_to_roms (nios2_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (nios2_instruction_master_address),                    //        instruction_master.address
		.i_read                              (nios2_instruction_master_read),                       //                          .read
		.i_readdata                          (nios2_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (nios2_instruction_master_waitrequest),                //                          .waitrequest
		.irq                                 (nios2_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (),                                                    //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_nios2_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_nios2_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_nios2_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_nios2_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_nios2_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_nios2_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_nios2_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_nios2_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                     // custom_instruction_master.readra
	);

	i2c_master_top #(
		.ARST_LVL (1'b1)
	) opencores_i2c (
		.wb_clk_i     (clk_clk),                                                           //            clock_sink.clk
		.wb_rst_i     (rst_controller_reset_out_reset),                                    //            reset_sink.reset
		.scl_pad_o    (oc_i2c_scl_pad_o),                                                  //           conduit_end.scl_pad_o
		.scl_padoen_o (oc_i2c_scl_padoen_o),                                               //                      .scl_padoen_o
		.sda_pad_i    (oc_i2c_sda_pad_i),                                                  //                      .sda_pad_i
		.sda_pad_o    (oc_i2c_sda_pad_o),                                                  //                      .sda_pad_o
		.sda_padoen_o (oc_i2c_sda_padoen_o),                                               //                      .sda_padoen_o
		.arst_i       (oc_i2c_arst_i),                                                     //                      .arst_i
		.scl_pad_i    (oc_i2c_scl_pad_i),                                                  //                      .scl_pad_i
		.wb_inta_o    (irq_mapper_receiver1_irq),                                          //      interrupt_sender.irq
		.wb_dat_i     (mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_writedata),   // bladerf_oc_i2c_master.writedata
		.wb_dat_o     (mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_readdata),    //                      .readdata
		.wb_we_i      (mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_write),       //                      .write
		.wb_stb_i     (mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_byteenable),  //                      .byteenable
		.wb_cyc_i     (mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_chipselect),  //                      .chipselect
		.wb_ack_o     (mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_waitrequest), //                      .waitrequest_n
		.wb_adr_i     (mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_address)      //                      .address
	);

	nios_system_peripheral_spi peripheral_spi (
		.clk           (clk_clk),                                                      //              clk.clk
		.reset_n       (~rst_controller_reset_out_reset),                              //            reset.reset_n
		.data_from_cpu (mm_interconnect_0_peripheral_spi_spi_control_port_writedata),  // spi_control_port.writedata
		.data_to_cpu   (mm_interconnect_0_peripheral_spi_spi_control_port_readdata),   //                 .readdata
		.mem_addr      (mm_interconnect_0_peripheral_spi_spi_control_port_address),    //                 .address
		.read_n        (~mm_interconnect_0_peripheral_spi_spi_control_port_read),      //                 .read_n
		.spi_select    (mm_interconnect_0_peripheral_spi_spi_control_port_chipselect), //                 .chipselect
		.write_n       (~mm_interconnect_0_peripheral_spi_spi_control_port_write),     //                 .write_n
		.irq           (irq_mapper_receiver6_irq),                                     //              irq.irq
		.MISO          (dac_MISO),                                                     //         external.export
		.MOSI          (dac_MOSI),                                                     //                 .export
		.SCLK          (dac_SCLK),                                                     //                 .export
		.SS_n          (dac_SS_n)                                                      //                 .export
	);

	nios_system_ram ram (
		.clk        (clk_clk),                             //   clk1.clk
		.address    (mm_interconnect_0_ram_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_ram_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_ram_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_ram_s1_write),      //       .write
		.readdata   (mm_interconnect_0_ram_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_ram_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_ram_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),      // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),  //       .reset_req
		.freeze     (1'b0)                                 // (terminated)
	);

	time_tamer rx_tamer (
		.reset       (rst_controller_reset_out_reset),                          //            reset.reset
		.din         (mm_interconnect_0_rx_tamer_avalon_slave_0_writedata),     //   avalon_slave_0.writedata
		.dout        (mm_interconnect_0_rx_tamer_avalon_slave_0_readdata),      //                 .readdata
		.write       (mm_interconnect_0_rx_tamer_avalon_slave_0_write),         //                 .write
		.read        (mm_interconnect_0_rx_tamer_avalon_slave_0_read),          //                 .read
		.waitreq     (mm_interconnect_0_rx_tamer_avalon_slave_0_waitrequest),   //                 .waitrequest
		.readack     (mm_interconnect_0_rx_tamer_avalon_slave_0_readdatavalid), //                 .readdatavalid
		.addr        (mm_interconnect_0_rx_tamer_avalon_slave_0_address),       //                 .address
		.clock       (clk_clk),                                                 //       clock_sink.clk
		.intr        (irq_mapper_receiver3_irq),                                // interrupt_sender.irq
		.ts_sync_in  (rx_tamer_ts_sync_in),                                     //      conduit_end.ts_sync_in
		.ts_sync_out (rx_tamer_ts_sync_out),                                    //                 .ts_sync_out
		.ts_pps      (rx_tamer_ts_pps),                                         //                 .ts_pps
		.ts_clock    (rx_tamer_ts_clock),                                       //                 .ts_clock
		.ts_reset    (rx_tamer_ts_reset),                                       //                 .ts_reset
		.ts_time     (rx_tamer_ts_time)                                         //                 .ts_time
	);

	nios_system_rx_trigger_ctl rx_trigger_ctl (
		.clk        (clk_clk),                                        //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                //               reset.reset_n
		.address    (mm_interconnect_0_rx_trigger_ctl_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_rx_trigger_ctl_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_rx_trigger_ctl_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_rx_trigger_ctl_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_rx_trigger_ctl_s1_readdata),   //                    .readdata
		.in_port    (rx_trigger_ctl_in_port),                         // external_connection.export
		.out_port   (rx_trigger_ctl_out_port)                         //                    .export
	);

	time_tamer tx_tamer (
		.reset       (rst_controller_reset_out_reset),                          //            reset.reset
		.din         (mm_interconnect_0_tx_tamer_avalon_slave_0_writedata),     //   avalon_slave_0.writedata
		.dout        (mm_interconnect_0_tx_tamer_avalon_slave_0_readdata),      //                 .readdata
		.write       (mm_interconnect_0_tx_tamer_avalon_slave_0_write),         //                 .write
		.read        (mm_interconnect_0_tx_tamer_avalon_slave_0_read),          //                 .read
		.waitreq     (mm_interconnect_0_tx_tamer_avalon_slave_0_waitrequest),   //                 .waitrequest
		.readack     (mm_interconnect_0_tx_tamer_avalon_slave_0_readdatavalid), //                 .readdatavalid
		.addr        (mm_interconnect_0_tx_tamer_avalon_slave_0_address),       //                 .address
		.clock       (clk_clk),                                                 //       clock_sink.clk
		.intr        (irq_mapper_receiver2_irq),                                // interrupt_sender.irq
		.ts_sync_in  (tx_tamer_ts_sync_in),                                     //      conduit_end.ts_sync_in
		.ts_sync_out (tx_tamer_ts_sync_out),                                    //                 .ts_sync_out
		.ts_pps      (tx_tamer_ts_pps),                                         //                 .ts_pps
		.ts_clock    (tx_tamer_ts_clock),                                       //                 .ts_clock
		.ts_reset    (tx_tamer_ts_reset),                                       //                 .ts_reset
		.ts_time     (tx_tamer_ts_time)                                         //                 .ts_time
	);

	nios_system_rx_trigger_ctl tx_trigger_ctl (
		.clk        (clk_clk),                                        //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                //               reset.reset_n
		.address    (mm_interconnect_0_tx_trigger_ctl_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_tx_trigger_ctl_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_tx_trigger_ctl_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_tx_trigger_ctl_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_tx_trigger_ctl_s1_readdata),   //                    .readdata
		.in_port    (tx_trigger_ctl_in_port),                         // external_connection.export
		.out_port   (tx_trigger_ctl_out_port)                         //                    .export
	);

	nios_system_xb_gpio xb_gpio (
		.clk        (clk_clk),                                 //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),         //               reset.reset_n
		.address    (mm_interconnect_0_xb_gpio_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_xb_gpio_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_xb_gpio_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_xb_gpio_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_xb_gpio_s1_readdata),   //                    .readdata
		.in_port    (xb_gpio_in_port),                         // external_connection.export
		.out_port   (xb_gpio_out_port)                         //                    .export
	);

	nios_system_iq_corr_rx_phase_gain xb_gpio_dir (
		.clk        (clk_clk),                                     //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),             //               reset.reset_n
		.address    (mm_interconnect_0_xb_gpio_dir_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_xb_gpio_dir_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_xb_gpio_dir_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_xb_gpio_dir_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_xb_gpio_dir_s1_readdata),   //                    .readdata
		.out_port   (xb_gpio_dir_export)                           // external_connection.export
	);

	nios_system_mm_interconnect_0 mm_interconnect_0 (
		.system_clock_clk_clk                            (clk_clk),                                                            //                    system_clock_clk.clk
		.nios2_reset_reset_bridge_in_reset_reset         (rst_controller_reset_out_reset),                                     //   nios2_reset_reset_bridge_in_reset.reset
		.nios2_data_master_address                       (nios2_data_master_address),                                          //                   nios2_data_master.address
		.nios2_data_master_waitrequest                   (nios2_data_master_waitrequest),                                      //                                    .waitrequest
		.nios2_data_master_byteenable                    (nios2_data_master_byteenable),                                       //                                    .byteenable
		.nios2_data_master_read                          (nios2_data_master_read),                                             //                                    .read
		.nios2_data_master_readdata                      (nios2_data_master_readdata),                                         //                                    .readdata
		.nios2_data_master_write                         (nios2_data_master_write),                                            //                                    .write
		.nios2_data_master_writedata                     (nios2_data_master_writedata),                                        //                                    .writedata
		.nios2_data_master_debugaccess                   (nios2_data_master_debugaccess),                                      //                                    .debugaccess
		.nios2_instruction_master_address                (nios2_instruction_master_address),                                   //            nios2_instruction_master.address
		.nios2_instruction_master_waitrequest            (nios2_instruction_master_waitrequest),                               //                                    .waitrequest
		.nios2_instruction_master_read                   (nios2_instruction_master_read),                                      //                                    .read
		.nios2_instruction_master_readdata               (nios2_instruction_master_readdata),                                  //                                    .readdata
		.command_uart_avalon_slave_address               (mm_interconnect_0_command_uart_avalon_slave_address),                //           command_uart_avalon_slave.address
		.command_uart_avalon_slave_write                 (mm_interconnect_0_command_uart_avalon_slave_write),                  //                                    .write
		.command_uart_avalon_slave_read                  (mm_interconnect_0_command_uart_avalon_slave_read),                   //                                    .read
		.command_uart_avalon_slave_readdata              (mm_interconnect_0_command_uart_avalon_slave_readdata),               //                                    .readdata
		.command_uart_avalon_slave_writedata             (mm_interconnect_0_command_uart_avalon_slave_writedata),              //                                    .writedata
		.command_uart_avalon_slave_readdatavalid         (mm_interconnect_0_command_uart_avalon_slave_readdatavalid),          //                                    .readdatavalid
		.command_uart_avalon_slave_waitrequest           (mm_interconnect_0_command_uart_avalon_slave_waitrequest),            //                                    .waitrequest
		.control_s1_address                              (mm_interconnect_0_control_s1_address),                               //                          control_s1.address
		.control_s1_write                                (mm_interconnect_0_control_s1_write),                                 //                                    .write
		.control_s1_readdata                             (mm_interconnect_0_control_s1_readdata),                              //                                    .readdata
		.control_s1_writedata                            (mm_interconnect_0_control_s1_writedata),                             //                                    .writedata
		.control_s1_chipselect                           (mm_interconnect_0_control_s1_chipselect),                            //                                    .chipselect
		.iq_corr_rx_phase_gain_s1_address                (mm_interconnect_0_iq_corr_rx_phase_gain_s1_address),                 //            iq_corr_rx_phase_gain_s1.address
		.iq_corr_rx_phase_gain_s1_write                  (mm_interconnect_0_iq_corr_rx_phase_gain_s1_write),                   //                                    .write
		.iq_corr_rx_phase_gain_s1_readdata               (mm_interconnect_0_iq_corr_rx_phase_gain_s1_readdata),                //                                    .readdata
		.iq_corr_rx_phase_gain_s1_writedata              (mm_interconnect_0_iq_corr_rx_phase_gain_s1_writedata),               //                                    .writedata
		.iq_corr_rx_phase_gain_s1_chipselect             (mm_interconnect_0_iq_corr_rx_phase_gain_s1_chipselect),              //                                    .chipselect
		.iq_corr_tx_phase_gain_s1_address                (mm_interconnect_0_iq_corr_tx_phase_gain_s1_address),                 //            iq_corr_tx_phase_gain_s1.address
		.iq_corr_tx_phase_gain_s1_write                  (mm_interconnect_0_iq_corr_tx_phase_gain_s1_write),                   //                                    .write
		.iq_corr_tx_phase_gain_s1_readdata               (mm_interconnect_0_iq_corr_tx_phase_gain_s1_readdata),                //                                    .readdata
		.iq_corr_tx_phase_gain_s1_writedata              (mm_interconnect_0_iq_corr_tx_phase_gain_s1_writedata),               //                                    .writedata
		.iq_corr_tx_phase_gain_s1_chipselect             (mm_interconnect_0_iq_corr_tx_phase_gain_s1_chipselect),              //                                    .chipselect
		.jtag_uart_avalon_jtag_slave_address             (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),              //         jtag_uart_avalon_jtag_slave.address
		.jtag_uart_avalon_jtag_slave_write               (mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),                //                                    .write
		.jtag_uart_avalon_jtag_slave_read                (mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),                 //                                    .read
		.jtag_uart_avalon_jtag_slave_readdata            (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),             //                                    .readdata
		.jtag_uart_avalon_jtag_slave_writedata           (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),            //                                    .writedata
		.jtag_uart_avalon_jtag_slave_waitrequest         (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest),          //                                    .waitrequest
		.jtag_uart_avalon_jtag_slave_chipselect          (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),           //                                    .chipselect
		.lms_spi_avalon_slave_0_address                  (mm_interconnect_0_lms_spi_avalon_slave_0_address),                   //              lms_spi_avalon_slave_0.address
		.lms_spi_avalon_slave_0_write                    (mm_interconnect_0_lms_spi_avalon_slave_0_write),                     //                                    .write
		.lms_spi_avalon_slave_0_read                     (mm_interconnect_0_lms_spi_avalon_slave_0_read),                      //                                    .read
		.lms_spi_avalon_slave_0_readdata                 (mm_interconnect_0_lms_spi_avalon_slave_0_readdata),                  //                                    .readdata
		.lms_spi_avalon_slave_0_writedata                (mm_interconnect_0_lms_spi_avalon_slave_0_writedata),                 //                                    .writedata
		.lms_spi_avalon_slave_0_readdatavalid            (mm_interconnect_0_lms_spi_avalon_slave_0_readdatavalid),             //                                    .readdatavalid
		.lms_spi_avalon_slave_0_waitrequest              (mm_interconnect_0_lms_spi_avalon_slave_0_waitrequest),               //                                    .waitrequest
		.nios2_debug_mem_slave_address                   (mm_interconnect_0_nios2_debug_mem_slave_address),                    //               nios2_debug_mem_slave.address
		.nios2_debug_mem_slave_write                     (mm_interconnect_0_nios2_debug_mem_slave_write),                      //                                    .write
		.nios2_debug_mem_slave_read                      (mm_interconnect_0_nios2_debug_mem_slave_read),                       //                                    .read
		.nios2_debug_mem_slave_readdata                  (mm_interconnect_0_nios2_debug_mem_slave_readdata),                   //                                    .readdata
		.nios2_debug_mem_slave_writedata                 (mm_interconnect_0_nios2_debug_mem_slave_writedata),                  //                                    .writedata
		.nios2_debug_mem_slave_byteenable                (mm_interconnect_0_nios2_debug_mem_slave_byteenable),                 //                                    .byteenable
		.nios2_debug_mem_slave_waitrequest               (mm_interconnect_0_nios2_debug_mem_slave_waitrequest),                //                                    .waitrequest
		.nios2_debug_mem_slave_debugaccess               (mm_interconnect_0_nios2_debug_mem_slave_debugaccess),                //                                    .debugaccess
		.opencores_i2c_bladerf_oc_i2c_master_address     (mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_address),      // opencores_i2c_bladerf_oc_i2c_master.address
		.opencores_i2c_bladerf_oc_i2c_master_write       (mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_write),        //                                    .write
		.opencores_i2c_bladerf_oc_i2c_master_readdata    (mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_readdata),     //                                    .readdata
		.opencores_i2c_bladerf_oc_i2c_master_writedata   (mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_writedata),    //                                    .writedata
		.opencores_i2c_bladerf_oc_i2c_master_byteenable  (mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_byteenable),   //                                    .byteenable
		.opencores_i2c_bladerf_oc_i2c_master_waitrequest (~mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_waitrequest), //                                    .waitrequest
		.opencores_i2c_bladerf_oc_i2c_master_chipselect  (mm_interconnect_0_opencores_i2c_bladerf_oc_i2c_master_chipselect),   //                                    .chipselect
		.peripheral_spi_spi_control_port_address         (mm_interconnect_0_peripheral_spi_spi_control_port_address),          //     peripheral_spi_spi_control_port.address
		.peripheral_spi_spi_control_port_write           (mm_interconnect_0_peripheral_spi_spi_control_port_write),            //                                    .write
		.peripheral_spi_spi_control_port_read            (mm_interconnect_0_peripheral_spi_spi_control_port_read),             //                                    .read
		.peripheral_spi_spi_control_port_readdata        (mm_interconnect_0_peripheral_spi_spi_control_port_readdata),         //                                    .readdata
		.peripheral_spi_spi_control_port_writedata       (mm_interconnect_0_peripheral_spi_spi_control_port_writedata),        //                                    .writedata
		.peripheral_spi_spi_control_port_chipselect      (mm_interconnect_0_peripheral_spi_spi_control_port_chipselect),       //                                    .chipselect
		.ram_s1_address                                  (mm_interconnect_0_ram_s1_address),                                   //                              ram_s1.address
		.ram_s1_write                                    (mm_interconnect_0_ram_s1_write),                                     //                                    .write
		.ram_s1_readdata                                 (mm_interconnect_0_ram_s1_readdata),                                  //                                    .readdata
		.ram_s1_writedata                                (mm_interconnect_0_ram_s1_writedata),                                 //                                    .writedata
		.ram_s1_byteenable                               (mm_interconnect_0_ram_s1_byteenable),                                //                                    .byteenable
		.ram_s1_chipselect                               (mm_interconnect_0_ram_s1_chipselect),                                //                                    .chipselect
		.ram_s1_clken                                    (mm_interconnect_0_ram_s1_clken),                                     //                                    .clken
		.rx_tamer_avalon_slave_0_address                 (mm_interconnect_0_rx_tamer_avalon_slave_0_address),                  //             rx_tamer_avalon_slave_0.address
		.rx_tamer_avalon_slave_0_write                   (mm_interconnect_0_rx_tamer_avalon_slave_0_write),                    //                                    .write
		.rx_tamer_avalon_slave_0_read                    (mm_interconnect_0_rx_tamer_avalon_slave_0_read),                     //                                    .read
		.rx_tamer_avalon_slave_0_readdata                (mm_interconnect_0_rx_tamer_avalon_slave_0_readdata),                 //                                    .readdata
		.rx_tamer_avalon_slave_0_writedata               (mm_interconnect_0_rx_tamer_avalon_slave_0_writedata),                //                                    .writedata
		.rx_tamer_avalon_slave_0_readdatavalid           (mm_interconnect_0_rx_tamer_avalon_slave_0_readdatavalid),            //                                    .readdatavalid
		.rx_tamer_avalon_slave_0_waitrequest             (mm_interconnect_0_rx_tamer_avalon_slave_0_waitrequest),              //                                    .waitrequest
		.rx_trigger_ctl_s1_address                       (mm_interconnect_0_rx_trigger_ctl_s1_address),                        //                   rx_trigger_ctl_s1.address
		.rx_trigger_ctl_s1_write                         (mm_interconnect_0_rx_trigger_ctl_s1_write),                          //                                    .write
		.rx_trigger_ctl_s1_readdata                      (mm_interconnect_0_rx_trigger_ctl_s1_readdata),                       //                                    .readdata
		.rx_trigger_ctl_s1_writedata                     (mm_interconnect_0_rx_trigger_ctl_s1_writedata),                      //                                    .writedata
		.rx_trigger_ctl_s1_chipselect                    (mm_interconnect_0_rx_trigger_ctl_s1_chipselect),                     //                                    .chipselect
		.tx_tamer_avalon_slave_0_address                 (mm_interconnect_0_tx_tamer_avalon_slave_0_address),                  //             tx_tamer_avalon_slave_0.address
		.tx_tamer_avalon_slave_0_write                   (mm_interconnect_0_tx_tamer_avalon_slave_0_write),                    //                                    .write
		.tx_tamer_avalon_slave_0_read                    (mm_interconnect_0_tx_tamer_avalon_slave_0_read),                     //                                    .read
		.tx_tamer_avalon_slave_0_readdata                (mm_interconnect_0_tx_tamer_avalon_slave_0_readdata),                 //                                    .readdata
		.tx_tamer_avalon_slave_0_writedata               (mm_interconnect_0_tx_tamer_avalon_slave_0_writedata),                //                                    .writedata
		.tx_tamer_avalon_slave_0_readdatavalid           (mm_interconnect_0_tx_tamer_avalon_slave_0_readdatavalid),            //                                    .readdatavalid
		.tx_tamer_avalon_slave_0_waitrequest             (mm_interconnect_0_tx_tamer_avalon_slave_0_waitrequest),              //                                    .waitrequest
		.tx_trigger_ctl_s1_address                       (mm_interconnect_0_tx_trigger_ctl_s1_address),                        //                   tx_trigger_ctl_s1.address
		.tx_trigger_ctl_s1_write                         (mm_interconnect_0_tx_trigger_ctl_s1_write),                          //                                    .write
		.tx_trigger_ctl_s1_readdata                      (mm_interconnect_0_tx_trigger_ctl_s1_readdata),                       //                                    .readdata
		.tx_trigger_ctl_s1_writedata                     (mm_interconnect_0_tx_trigger_ctl_s1_writedata),                      //                                    .writedata
		.tx_trigger_ctl_s1_chipselect                    (mm_interconnect_0_tx_trigger_ctl_s1_chipselect),                     //                                    .chipselect
		.vctcxo_tamer_0_avalon_slave_0_address           (mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_address),            //       vctcxo_tamer_0_avalon_slave_0.address
		.vctcxo_tamer_0_avalon_slave_0_write             (mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_write),              //                                    .write
		.vctcxo_tamer_0_avalon_slave_0_read              (mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_read),               //                                    .read
		.vctcxo_tamer_0_avalon_slave_0_readdata          (mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_readdata),           //                                    .readdata
		.vctcxo_tamer_0_avalon_slave_0_writedata         (mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_writedata),          //                                    .writedata
		.vctcxo_tamer_0_avalon_slave_0_readdatavalid     (mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_readdatavalid),      //                                    .readdatavalid
		.vctcxo_tamer_0_avalon_slave_0_waitrequest       (mm_interconnect_0_vctcxo_tamer_0_avalon_slave_0_waitrequest),        //                                    .waitrequest
		.xb_gpio_s1_address                              (mm_interconnect_0_xb_gpio_s1_address),                               //                          xb_gpio_s1.address
		.xb_gpio_s1_write                                (mm_interconnect_0_xb_gpio_s1_write),                                 //                                    .write
		.xb_gpio_s1_readdata                             (mm_interconnect_0_xb_gpio_s1_readdata),                              //                                    .readdata
		.xb_gpio_s1_writedata                            (mm_interconnect_0_xb_gpio_s1_writedata),                             //                                    .writedata
		.xb_gpio_s1_chipselect                           (mm_interconnect_0_xb_gpio_s1_chipselect),                            //                                    .chipselect
		.xb_gpio_dir_s1_address                          (mm_interconnect_0_xb_gpio_dir_s1_address),                           //                      xb_gpio_dir_s1.address
		.xb_gpio_dir_s1_write                            (mm_interconnect_0_xb_gpio_dir_s1_write),                             //                                    .write
		.xb_gpio_dir_s1_readdata                         (mm_interconnect_0_xb_gpio_dir_s1_readdata),                          //                                    .readdata
		.xb_gpio_dir_s1_writedata                        (mm_interconnect_0_xb_gpio_dir_s1_writedata),                         //                                    .writedata
		.xb_gpio_dir_s1_chipselect                       (mm_interconnect_0_xb_gpio_dir_s1_chipselect)                         //                                    .chipselect
	);

	nios_system_irq_mapper irq_mapper (
		.clk           (clk_clk),                        //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.receiver2_irq (irq_mapper_receiver2_irq),       // receiver2.irq
		.receiver3_irq (irq_mapper_receiver3_irq),       // receiver3.irq
		.receiver4_irq (irq_mapper_receiver4_irq),       // receiver4.irq
		.receiver5_irq (irq_mapper_receiver5_irq),       // receiver5.irq
		.receiver6_irq (irq_mapper_receiver6_irq),       // receiver6.irq
		.sender_irq    (nios2_irq_irq)                   //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
